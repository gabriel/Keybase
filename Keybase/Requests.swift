// This file is autogenerated


//
// Account
//

public class AccountRequest: Request {

	func passphraseChange(sessionID: Int32, oldPassphrase: String, passphrase: String, force: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "oldPassphrase": oldPassphrase, "passphrase": passphrase, "force": force]

		self.sendRequest("keybase.1.account.passphraseChange" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Block
//

public class BlockRequest: Request {

	func establishSession(user: String, sid: String, completion: NSError? -> ()) {
		Dictionary d = ["user": user, "sid": sid]

		self.sendRequest("keybase.1.block.establishSession" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func putBlock(bid: BlockIdCombo, folder: String, blockKey: String, buf: NSData, completion: NSError? -> ()) {
		Dictionary d = ["bid": bid, "folder": folder, "blockKey": blockKey, "buf": buf]

		self.sendRequest("keybase.1.block.putBlock" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func getBlock(bid: BlockIdCombo, completion: NSError? -> GetBlockRes?) {
		Dictionary d = ["bid": bid]

		self.sendRequest("keybase.1.block.getBlock" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, GetBlockRes.fromJSON(response))
		))
	}

	func incBlockReference(bid: BlockIdCombo, nonce: NSData, folder: String, chargedTo: String, completion: NSError? -> ()) {
		Dictionary d = ["bid": bid, "nonce": nonce, "folder": folder, "chargedTo": chargedTo]

		self.sendRequest("keybase.1.block.incBlockReference" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func decBlockReference(bid: BlockIdCombo, nonce: NSData, folder: String, chargedTo: String, completion: NSError? -> ()) {
		Dictionary d = ["bid": bid, "nonce": nonce, "folder": folder, "chargedTo": chargedTo]

		self.sendRequest("keybase.1.block.decBlockReference" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// BTC
//

public class BTCRequest: Request {

	func registerBTC(sessionID: Int32, address: String, force: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "address": address, "force": force]

		self.sendRequest("keybase.1.BTC.registerBTC" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Config
//

public class ConfigRequest: Request {

	func getCurrentStatus(sessionID: Int32, completion: NSError? -> GetCurrentStatusRes?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.config.getCurrentStatus" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, GetCurrentStatusRes.fromJSON(response))
		))
	}

	func getConfig(sessionID: Int32, completion: NSError? -> Config?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.config.getConfig" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Config.fromJSON(response))
		))
	}

	func setUserConfig(sessionID: Int32, username: String, key: String, value: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username, "key": key, "value": value]

		self.sendRequest("keybase.1.config.setUserConfig" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Crypto
//

public class CryptoRequest: Request {

	func signED25519(sessionID: Int32, msg: NSData, reason: String, completion: NSError? -> ED25519SignatureInfo?) {
		Dictionary d = ["sessionID": sessionID, "msg": msg, "reason": reason]

		self.sendRequest("keybase.1.crypto.signED25519" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, ED25519SignatureInfo.fromJSON(response))
		))
	}

	func unboxBytes32(sessionID: Int32, encryptedBytes32: NSData, nonce: NSData, peersPublicKey: NSData, reason: String, completion: NSError? -> NSData?) {
		Dictionary d = ["sessionID": sessionID, "encryptedBytes32": encryptedBytes32, "nonce": nonce, "peersPublicKey": peersPublicKey, "reason": reason]

		self.sendRequest("keybase.1.crypto.unboxBytes32" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, NSData.fromJSON(response))
		))
	}

}

//
// Ctl
//

public class CtlRequest: Request {

	func stop(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.ctl.stop" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func logRotate(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.ctl.logRotate" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func setLogLevel(sessionID: Int32, level: LogLevel, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "level": level]

		self.sendRequest("keybase.1.ctl.setLogLevel" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func reload(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.ctl.reload" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func dbNuke(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.ctl.dbNuke" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Debugging
//

public class DebuggingRequest: Request {

	func firstStep(sessionID: Int32, val: Int32, completion: NSError? -> FirstStepResult?) {
		Dictionary d = ["sessionID": sessionID, "val": val]

		self.sendRequest("keybase.1.debugging.firstStep" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, FirstStepResult.fromJSON(response))
		))
	}

	func secondStep(sessionID: Int32, val: Int32, completion: NSError? -> Int32?) {
		Dictionary d = ["sessionID": sessionID, "val": val]

		self.sendRequest("keybase.1.debugging.secondStep" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Int32.fromJSON(response))
		))
	}

	func increment(sessionID: Int32, val: Int32, completion: NSError? -> Int32?) {
		Dictionary d = ["sessionID": sessionID, "val": val]

		self.sendRequest("keybase.1.debugging.increment" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Int32.fromJSON(response))
		))
	}

}

//
// Device
//

public class DeviceRequest: Request {

	func deviceList(sessionID: Int32, completion: (NSError?, [Device]?) -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.device.deviceList" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Device.fromJSONArray(response))
		))
	}

	func deviceAdd(sessionID: Int32, secretPhrase: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "secretPhrase": secretPhrase]

		self.sendRequest("keybase.1.device.deviceAdd" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func deviceAddCancel(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.device.deviceAddCancel" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Doctor
//

public class DoctorRequest: Request {

	func doctor(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.doctor.doctor" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// DoctorUi
//

public class DoctorUiRequest: Request {

	func loginSelect(sessionID: Int32, currentUser: String, otherUsers: [String], completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "currentUser": currentUser, "otherUsers": otherUsers]

		self.sendRequest("keybase.1.doctorUi.loginSelect" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func displayStatus(sessionID: Int32, status: DoctorStatus, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "status": status]

		self.sendRequest("keybase.1.doctorUi.displayStatus" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func displayResult(sessionID: Int32, message: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "message": message]

		self.sendRequest("keybase.1.doctorUi.displayResult" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Favorite
//

public class FavoriteRequest: Request {

	func favoriteAdd(sessionID: Int32, folder: Folder, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "folder": folder]

		self.sendRequest("keybase.1.favorite.favoriteAdd" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func favoriteDelete(sessionID: Int32, folder: Folder, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "folder": folder]

		self.sendRequest("keybase.1.favorite.favoriteDelete" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func favoriteList(sessionID: Int32, completion: (NSError?, [Folder]?) -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.favorite.favoriteList" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Folder.fromJSONArray(response))
		))
	}

}

//
// GpgUi
//

public class GpgUiRequest: Request {

	func wantToAddGPGKey(sessionID: Int32, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.gpgUi.wantToAddGPGKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func confirmDuplicateKeyChosen(sessionID: Int32, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.gpgUi.confirmDuplicateKeyChosen" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func selectKeyAndPushOption(sessionID: Int32, keys: [GPGKey], completion: NSError? -> SelectKeyRes?) {
		Dictionary d = ["sessionID": sessionID, "keys": keys]

		self.sendRequest("keybase.1.gpgUi.selectKeyAndPushOption" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, SelectKeyRes.fromJSON(response))
		))
	}

	func selectKey(sessionID: Int32, keys: [GPGKey], completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "keys": keys]

		self.sendRequest("keybase.1.gpgUi.selectKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

}

//
// Identify
//

public class IdentifyRequest: Request {

/*!
 Identify a user from a username or assertion (e.g. kbuser, twuser@twitter).
 If trackStatement is true, we'll return a generated JSON tracking statement.
 If forceRemoteCheck is true, we force all remote proofs to be checked (otherwise a cache is used).
 */
	func identify(sessionID: Int32, userAssertion: String, trackStatement: Bool, forceRemoteCheck: Bool, completion: NSError? -> IdentifyRes?) {
		Dictionary d = ["sessionID": sessionID, "userAssertion": userAssertion, "trackStatement": trackStatement, "forceRemoteCheck": forceRemoteCheck]

		self.sendRequest("keybase.1.identify.identify" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, IdentifyRes.fromJSON(response))
		))
	}

}

//
// IdentifyUi
//

public class IdentifyUiRequest: Request {

	func start(sessionID: Int32, username: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.identifyUi.start" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func displayKey(sessionID: Int32, key: IdentifyKey, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "key": key]

		self.sendRequest("keybase.1.identifyUi.displayKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func reportLastTrack(sessionID: Int32, track: TrackSummary, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "track": track]

		self.sendRequest("keybase.1.identifyUi.reportLastTrack" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func launchNetworkChecks(sessionID: Int32, identity: Identity, user: User, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "identity": identity, "user": user]

		self.sendRequest("keybase.1.identifyUi.launchNetworkChecks" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func displayTrackStatement(sessionID: Int32, stmt: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "stmt": stmt]

		self.sendRequest("keybase.1.identifyUi.displayTrackStatement" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func finishWebProofCheck(sessionID: Int32, rp: RemoteProof, lcr: LinkCheckResult, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "rp": rp, "lcr": lcr]

		self.sendRequest("keybase.1.identifyUi.finishWebProofCheck" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func finishSocialProofCheck(sessionID: Int32, rp: RemoteProof, lcr: LinkCheckResult, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "rp": rp, "lcr": lcr]

		self.sendRequest("keybase.1.identifyUi.finishSocialProofCheck" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func displayCryptocurrency(sessionID: Int32, c: Cryptocurrency, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "c": c]

		self.sendRequest("keybase.1.identifyUi.displayCryptocurrency" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func confirm(sessionID: Int32, outcome: IdentifyOutcome, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "outcome": outcome]

		self.sendRequest("keybase.1.identifyUi.confirm" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func finish(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.identifyUi.finish" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// LocksmithUi
//

public class LocksmithUiRequest: Request {

	func promptDeviceName(sessionID: Int32, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.locksmithUi.promptDeviceName" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func deviceNameTaken(sessionID: Int32, name: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "name": name]

		self.sendRequest("keybase.1.locksmithUi.deviceNameTaken" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func selectSigner(sessionID: Int32, devices: [Device], hasPGP: Bool, hasPaperBackupKey: Bool, completion: NSError? -> SelectSignerRes?) {
		Dictionary d = ["sessionID": sessionID, "devices": devices, "hasPGP": hasPGP, "hasPaperBackupKey": hasPaperBackupKey]

		self.sendRequest("keybase.1.locksmithUi.selectSigner" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, SelectSignerRes.fromJSON(response))
		))
	}

	func deviceSignAttemptErr(sessionID: Int32, msg: String, attempt: Int32, total: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "msg": msg, "attempt": attempt, "total": total]

		self.sendRequest("keybase.1.locksmithUi.deviceSignAttemptErr" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func displaySecretWords(sessionID: Int32, secret: String, deviceNameExisting: String, deviceNameToAdd: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "secret": secret, "deviceNameExisting": deviceNameExisting, "deviceNameToAdd": deviceNameToAdd]

		self.sendRequest("keybase.1.locksmithUi.displaySecretWords" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func kexStatus(sessionID: Int32, msg: String, code: KexStatusCode, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "msg": msg, "code": code]

		self.sendRequest("keybase.1.locksmithUi.kexStatus" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// LogUi
//

public class LogUiRequest: Request {

	func log(sessionID: Int32, level: LogLevel, text: Text, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "level": level, "text": text]

		self.sendRequest("keybase.1.logUi.log" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Login
//

public class LoginRequest: Request {

	func getConfiguredAccounts(sessionID: Int32, completion: (NSError?, [ConfiguredAccount]?) -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.login.getConfiguredAccounts" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, ConfiguredAccount.fromJSONArray(response))
		))
	}

	func loginWithPrompt(sessionID: Int32, username: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.login.loginWithPrompt" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func loginWithStoredSecret(sessionID: Int32, username: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.login.loginWithStoredSecret" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func loginWithPassphrase(sessionID: Int32, username: String, passphrase: String, storeSecret: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username, "passphrase": passphrase, "storeSecret": storeSecret]

		self.sendRequest("keybase.1.login.loginWithPassphrase" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func clearStoredSecret(sessionID: Int32, username: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.login.clearStoredSecret" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func cancelLogin(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.login.cancelLogin" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func logout(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.login.logout" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func reset(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.login.reset" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func paperKey(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.login.paperKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// LoginUi
//

public class LoginUiRequest: Request {

	func getEmailOrUsername(sessionID: Int32, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.loginUi.getEmailOrUsername" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func promptRevokePaperKeys(sessionID: Int32, device: Device, index: Int32, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "device": device, "index": index]

		self.sendRequest("keybase.1.loginUi.promptRevokePaperKeys" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func displayPaperKeyPhrase(sessionID: Int32, phrase: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "phrase": phrase]

		self.sendRequest("keybase.1.loginUi.displayPaperKeyPhrase" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func displayPrimaryPaperKey(sessionID: Int32, phrase: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "phrase": phrase]

		self.sendRequest("keybase.1.loginUi.displayPrimaryPaperKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Metadata
//

public class MetadataRequest: Request {

	func authenticate(user: String, deviceKID: String, sid: String, completion: NSError? -> Int32?) {
		Dictionary d = ["user": user, "deviceKID": deviceKID, "sid": sid]

		self.sendRequest("keybase.1.metadata.authenticate" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Int32.fromJSON(response))
		))
	}

	func putMetadata(mdBlock: NSData, logTags: Dictionary<String, String>, completion: NSError? -> ()) {
		Dictionary d = ["mdBlock": mdBlock, "logTags": logTags]

		self.sendRequest("keybase.1.metadata.putMetadata" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func getMetadata(folderID: String, folderHandle: NSData, unmerged: Bool, startRevision: Int64, stopRevision: Int64, logTags: Dictionary<String, String>, completion: NSError? -> MetadataResponse?) {
		Dictionary d = ["folderID": folderID, "folderHandle": folderHandle, "unmerged": unmerged, "startRevision": startRevision, "stopRevision": stopRevision, "logTags": logTags]

		self.sendRequest("keybase.1.metadata.getMetadata" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, MetadataResponse.fromJSON(response))
		))
	}

	func registerForUpdates(folderID: String, currRevision: Int64, logTags: Dictionary<String, String>, completion: NSError? -> ()) {
		Dictionary d = ["folderID": folderID, "currRevision": currRevision, "logTags": logTags]

		self.sendRequest("keybase.1.metadata.registerForUpdates" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pruneUnmerged(folderID: String, logTags: Dictionary<String, String>, completion: NSError? -> ()) {
		Dictionary d = ["folderID": folderID, "logTags": logTags]

		self.sendRequest("keybase.1.metadata.pruneUnmerged" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func putKeys(keyHalves: [KeyHalf], logTags: Dictionary<String, String>, completion: NSError? -> ()) {
		Dictionary d = ["keyHalves": keyHalves, "logTags": logTags]

		self.sendRequest("keybase.1.metadata.putKeys" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func getKey(keyHalfID: NSData, logTags: Dictionary<String, String>, completion: NSError? -> NSData?) {
		Dictionary d = ["keyHalfID": keyHalfID, "logTags": logTags]

		self.sendRequest("keybase.1.metadata.getKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, NSData.fromJSON(response))
		))
	}

	func truncateLock(folderID: String, completion: NSError? -> Bool?) {
		Dictionary d = ["folderID": folderID]

		self.sendRequest("keybase.1.metadata.truncateLock" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func truncateUnlock(folderID: String, completion: NSError? -> Bool?) {
		Dictionary d = ["folderID": folderID]

		self.sendRequest("keybase.1.metadata.truncateUnlock" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func ping(completion: NSError? -> ()) {
		Dictionary d = []

		self.sendRequest("keybase.1.metadata.ping" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// MetadataUpdate
//

public class MetadataUpdateRequest: Request {

	func metadataUpdate(folderID: String, revision: Int64, completion: NSError? -> ()) {
		Dictionary d = ["folderID": folderID, "revision": revision]

		self.sendRequest("keybase.1.metadataUpdate.metadataUpdate" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Pgp
//

public class PgpRequest: Request {

	func pgpSign(sessionID: Int32, source: Stream, sink: Stream, opts: PGPSignOptions, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "source": source, "sink": sink, "opts": opts]

		self.sendRequest("keybase.1.pgp.pgpSign" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpPull(sessionID: Int32, userAsserts: [String], completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "userAsserts": userAsserts]

		self.sendRequest("keybase.1.pgp.pgpPull" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpEncrypt(sessionID: Int32, source: Stream, sink: Stream, opts: PGPEncryptOptions, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "source": source, "sink": sink, "opts": opts]

		self.sendRequest("keybase.1.pgp.pgpEncrypt" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpDecrypt(sessionID: Int32, source: Stream, sink: Stream, opts: PGPDecryptOptions, completion: NSError? -> PGPSigVerification?) {
		Dictionary d = ["sessionID": sessionID, "source": source, "sink": sink, "opts": opts]

		self.sendRequest("keybase.1.pgp.pgpDecrypt" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, PGPSigVerification.fromJSON(response))
		))
	}

	func pgpVerify(sessionID: Int32, source: Stream, opts: PGPVerifyOptions, completion: NSError? -> PGPSigVerification?) {
		Dictionary d = ["sessionID": sessionID, "source": source, "opts": opts]

		self.sendRequest("keybase.1.pgp.pgpVerify" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, PGPSigVerification.fromJSON(response))
		))
	}

	func pgpImport(sessionID: Int32, key: NSData, pushSecret: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "key": key, "pushSecret": pushSecret]

		self.sendRequest("keybase.1.pgp.pgpImport" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpExport(sessionID: Int32, options: PGPQuery, completion: (NSError?, [KeyInfo]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "options": options]

		self.sendRequest("keybase.1.pgp.pgpExport" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, KeyInfo.fromJSONArray(response))
		))
	}

	func pgpExportByFingerprint(sessionID: Int32, options: PGPQuery, completion: (NSError?, [KeyInfo]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "options": options]

		self.sendRequest("keybase.1.pgp.pgpExportByFingerprint" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, KeyInfo.fromJSONArray(response))
		))
	}

	func pgpExportByKID(sessionID: Int32, options: PGPQuery, completion: (NSError?, [KeyInfo]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "options": options]

		self.sendRequest("keybase.1.pgp.pgpExportByKID" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, KeyInfo.fromJSONArray(response))
		))
	}

	func pgpKeyGen(sessionID: Int32, primaryBits: Int32, subkeyBits: Int32, createUids: PGPCreateUids, allowMulti: Bool, doExport: Bool, pushSecret: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "primaryBits": primaryBits, "subkeyBits": subkeyBits, "createUids": createUids, "allowMulti": allowMulti, "doExport": doExport, "pushSecret": pushSecret]

		self.sendRequest("keybase.1.pgp.pgpKeyGen" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpKeyGenDefault(sessionID: Int32, createUids: PGPCreateUids, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "createUids": createUids]

		self.sendRequest("keybase.1.pgp.pgpKeyGenDefault" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpDeletePrimary(sessionID: Int32, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.pgp.pgpDeletePrimary" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpSelect(sessionID: Int32, fingerprintQuery: String, allowMulti: Bool, skipImport: Bool, onlyImport: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "fingerprintQuery": fingerprintQuery, "allowMulti": allowMulti, "skipImport": skipImport, "onlyImport": onlyImport]

		self.sendRequest("keybase.1.pgp.pgpSelect" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func pgpUpdate(sessionID: Int32, all: Bool, fingerprints: [String], completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "all": all, "fingerprints": fingerprints]

		self.sendRequest("keybase.1.pgp.pgpUpdate" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Prove
//

public class ProveRequest: Request {

	func startProof(sessionID: Int32, service: String, username: String, force: Bool, promptPosted: Bool, completion: NSError? -> StartProofResult?) {
		Dictionary d = ["sessionID": sessionID, "service": service, "username": username, "force": force, "promptPosted": promptPosted]

		self.sendRequest("keybase.1.prove.startProof" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, StartProofResult.fromJSON(response))
		))
	}

	func checkProof(sessionID: Int32, sigID: String, completion: NSError? -> CheckProofStatus?) {
		Dictionary d = ["sessionID": sessionID, "sigID": sigID]

		self.sendRequest("keybase.1.prove.checkProof" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, CheckProofStatus.fromJSON(response))
		))
	}

}

//
// ProveUi
//

public class ProveUiRequest: Request {

	func promptOverwrite(sessionID: Int32, account: String, typ: PromptOverwriteType, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "account": account, "typ": typ]

		self.sendRequest("keybase.1.proveUi.promptOverwrite" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func promptUsername(sessionID: Int32, prompt: String, prevError: Status, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "prompt": prompt, "prevError": prevError]

		self.sendRequest("keybase.1.proveUi.promptUsername" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func outputPrechecks(sessionID: Int32, text: Text, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "text": text]

		self.sendRequest("keybase.1.proveUi.outputPrechecks" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func preProofWarning(sessionID: Int32, text: Text, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "text": text]

		self.sendRequest("keybase.1.proveUi.preProofWarning" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func outputInstructions(sessionID: Int32, instructions: Text, proof: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "instructions": instructions, "proof": proof]

		self.sendRequest("keybase.1.proveUi.outputInstructions" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func okToCheck(sessionID: Int32, name: String, attempt: Int32, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "name": name, "attempt": attempt]

		self.sendRequest("keybase.1.proveUi.okToCheck" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

	func displayRecheckWarning(sessionID: Int32, text: Text, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "text": text]

		self.sendRequest("keybase.1.proveUi.displayRecheckWarning" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Quota
//

public class QuotaRequest: Request {

	func verifySession(session: String, completion: NSError? -> SessionToken?) {
		Dictionary d = ["session": session]

		self.sendRequest("keybase.1.quota.verifySession" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, SessionToken.fromJSON(response))
		))
	}

}

//
// Revoke
//

public class RevokeRequest: Request {

	func revokeKey(sessionID: Int32, keyID: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "keyID": keyID]

		self.sendRequest("keybase.1.revoke.revokeKey" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func revokeDevice(sessionID: Int32, deviceID: String, force: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "deviceID": deviceID, "force": force]

		self.sendRequest("keybase.1.revoke.revokeDevice" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func revokeSigs(sessionID: Int32, sigIDs: [String], completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "sigIDs": sigIDs]

		self.sendRequest("keybase.1.revoke.revokeSigs" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// SecretUi
//

public class SecretUiRequest: Request {

	func getSecret(sessionID: Int32, pinentry: SecretEntryArg, terminal: SecretEntryArg, completion: NSError? -> SecretEntryRes?) {
		Dictionary d = ["sessionID": sessionID, "pinentry": pinentry, "terminal": terminal]

		self.sendRequest("keybase.1.secretUi.getSecret" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, SecretEntryRes.fromJSON(response))
		))
	}

	func getNewPassphrase(sessionID: Int32, terminalPrompt: String, pinentryDesc: String, pinentryPrompt: String, retryMessage: String, useSecretStore: Bool, completion: NSError? -> GetNewPassphraseRes?) {
		Dictionary d = ["sessionID": sessionID, "terminalPrompt": terminalPrompt, "pinentryDesc": pinentryDesc, "pinentryPrompt": pinentryPrompt, "retryMessage": retryMessage, "useSecretStore": useSecretStore]

		self.sendRequest("keybase.1.secretUi.getNewPassphrase" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, GetNewPassphraseRes.fromJSON(response))
		))
	}

	func getKeybasePassphrase(sessionID: Int32, username: String, retry: String, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "username": username, "retry": retry]

		self.sendRequest("keybase.1.secretUi.getKeybasePassphrase" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func getPaperKeyPassphrase(sessionID: Int32, username: String, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.secretUi.getPaperKeyPassphrase" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

}

//
// Session
//

public class SessionRequest: Request {

	func currentSession(sessionID: Int32, completion: NSError? -> Session?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.session.currentSession" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Session.fromJSON(response))
		))
	}

	func currentUID(sessionID: Int32, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.session.currentUID" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

}

//
// Signup
//

public class SignupRequest: Request {

	func checkUsernameAvailable(sessionID: Int32, username: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.signup.checkUsernameAvailable" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func signup(sessionID: Int32, email: String, inviteCode: String, passphrase: String, username: String, deviceName: String, storeSecret: Bool, completion: NSError? -> SignupRes?) {
		Dictionary d = ["sessionID": sessionID, "email": email, "inviteCode": inviteCode, "passphrase": passphrase, "username": username, "deviceName": deviceName, "storeSecret": storeSecret]

		self.sendRequest("keybase.1.signup.signup" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, SignupRes.fromJSON(response))
		))
	}

	func inviteRequest(sessionID: Int32, email: String, fullname: String, notes: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "email": email, "fullname": fullname, "notes": notes]

		self.sendRequest("keybase.1.signup.inviteRequest" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Sigs
//

public class SigsRequest: Request {

	func sigList(sessionID: Int32, arg: SigListArgs, completion: (NSError?, [Sig]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "arg": arg]

		self.sendRequest("keybase.1.sigs.sigList" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Sig.fromJSONArray(response))
		))
	}

	func sigListJSON(sessionID: Int32, arg: SigListArgs, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "arg": arg]

		self.sendRequest("keybase.1.sigs.sigListJSON" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

}

//
// StreamUi
//

public class StreamUiRequest: Request {

	func close(sessionID: Int32, s: Stream, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "s": s]

		self.sendRequest("keybase.1.streamUi.close" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func read(sessionID: Int32, s: Stream, sz: Int32, completion: NSError? -> NSData?) {
		Dictionary d = ["sessionID": sessionID, "s": s, "sz": sz]

		self.sendRequest("keybase.1.streamUi.read" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, NSData.fromJSON(response))
		))
	}

	func write(sessionID: Int32, s: Stream, buf: NSData, completion: NSError? -> Int32?) {
		Dictionary d = ["sessionID": sessionID, "s": s, "buf": buf]

		self.sendRequest("keybase.1.streamUi.write" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Int32.fromJSON(response))
		))
	}

}

//
// Test
//

public class TestRequest: Request {

	func test(sessionID: Int32, name: String, completion: NSError? -> Test?) {
		Dictionary d = ["sessionID": sessionID, "name": name]

		self.sendRequest("keybase.1.test.test" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Test.fromJSON(response))
		))
	}

	func testCallback(sessionID: Int32, name: String, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "name": name]

		self.sendRequest("keybase.1.test.testCallback" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func panic(message: String, completion: NSError? -> ()) {
		Dictionary d = ["message": message]

		self.sendRequest("keybase.1.test.panic" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Track
//

public class TrackRequest: Request {

	func track(sessionID: Int32, userAssertion: String, options: TrackOptions, forceRemoteCheck: Bool, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "userAssertion": userAssertion, "options": options, "forceRemoteCheck": forceRemoteCheck]

		self.sendRequest("keybase.1.track.track" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func trackWithToken(sessionID: Int32, trackToken: String, options: TrackOptions, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "trackToken": trackToken, "options": options]

		self.sendRequest("keybase.1.track.trackWithToken" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

	func untrack(sessionID: Int32, username: String, completion: NSError? -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.track.untrack" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error)
		))
	}

}

//
// Ui
//

public class UiRequest: Request {

	func promptYesNo(sessionID: Int32, text: Text, promptDefault: PromptDefault, completion: NSError? -> Bool?) {
		Dictionary d = ["sessionID": sessionID, "text": text, "promptDefault": promptDefault]

		self.sendRequest("keybase.1.ui.promptYesNo" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Bool.fromJSON(response))
		))
	}

}

//
// User
//

public class UserRequest: Request {

	func listTrackers(sessionID: Int32, uid: String, completion: (NSError?, [Tracker]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "uid": uid]

		self.sendRequest("keybase.1.user.listTrackers" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Tracker.fromJSONArray(response))
		))
	}

	func listTrackersByName(sessionID: Int32, username: String, completion: (NSError?, [Tracker]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "username": username]

		self.sendRequest("keybase.1.user.listTrackersByName" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Tracker.fromJSONArray(response))
		))
	}

	func listTrackersSelf(sessionID: Int32, completion: (NSError?, [Tracker]?) -> ()) {
		Dictionary d = ["sessionID": sessionID]

		self.sendRequest("keybase.1.user.listTrackersSelf" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, Tracker.fromJSONArray(response))
		))
	}

	func loadUncheckedUserSummaries(sessionID: Int32, uids: [String], completion: (NSError?, [UserSummary]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "uids": uids]

		self.sendRequest("keybase.1.user.loadUncheckedUserSummaries" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, UserSummary.fromJSONArray(response))
		))
	}

	func loadUser(sessionID: Int32, uid: String, completion: NSError? -> User?) {
		Dictionary d = ["sessionID": sessionID, "uid": uid]

		self.sendRequest("keybase.1.user.loadUser" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, User.fromJSON(response))
		))
	}

	func loadUserPlusKeys(sessionID: Int32, uid: String, cacheOK: Bool, completion: NSError? -> UserPlusKeys?) {
		Dictionary d = ["sessionID": sessionID, "uid": uid, "cacheOK": cacheOK]

		self.sendRequest("keybase.1.user.loadUserPlusKeys" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, UserPlusKeys.fromJSON(response))
		))
	}

	func loadPublicKeys(sessionID: Int32, uid: String, completion: (NSError?, [PublicKey]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "uid": uid]

		self.sendRequest("keybase.1.user.loadPublicKeys" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, PublicKey.fromJSONArray(response))
		))
	}

	func listTracking(sessionID: Int32, filter: String, completion: (NSError?, [UserSummary]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "filter": filter]

		self.sendRequest("keybase.1.user.listTracking" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, UserSummary.fromJSONArray(response))
		))
	}

	func listTrackingJSON(sessionID: Int32, filter: String, verbose: Bool, completion: NSError? -> String?) {
		Dictionary d = ["sessionID": sessionID, "filter": filter, "verbose": verbose]

		self.sendRequest("keybase.1.user.listTrackingJSON" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, String.fromJSON(response))
		))
	}

	func search(sessionID: Int32, query: String, completion: (NSError?, [SearchResult]?) -> ()) {
		Dictionary d = ["sessionID": sessionID, "query": query]

		self.sendRequest("keybase.1.user.search" params:d messageId:self.messageId completion:((error: NSError?, response: AnyObject?) in
			completion(error, SearchResult.fromJSONArray(response))
		))
	}

}
